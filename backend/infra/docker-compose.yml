services:
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: adinga
      MYSQL_USER: app
      MYSQL_PASSWORD: app
      TZ: Asia/Seoul
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_0900_ai_ci
      - --default-time-zone=+09:00
      - --innodb-use-native-aio=0
    ports: ["3307:3306"]
    restart: unless-stopped
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      # exit 0/1 확실히 주도록 || exit 1
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -proot --silent || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 90
      start_period: 90s

  redis:
    image: redis:7
    ports: ["6379:6379"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 5s
      timeout: 3s
      retries: 30
      start_period: 10s

  kafka:
    image: redpandadata/redpanda:latest
    command:
      [
        "redpanda","start","--mode=dev-container",
        "--kafka-addr=PLAINTEXT://0.0.0.0:9092,OUTSIDE://0.0.0.0:19092",
        "--advertise-kafka-addr=PLAINTEXT://kafka:9092,OUTSIDE://localhost:19092"
      ]
    ports: [ "9092:9092", "19092:19092" ]
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "rpk cluster info >/dev/null 2>&1" ]
      interval: 5s
      timeout: 5s
      retries: 60
      start_period: 60s
    volumes:
      - redpanda_data:/var/lib/redpanda

  kafka-init:
    image: redpandadata/redpanda:latest
    depends_on:
      kafka:
        condition: service_healthy
    # 한 줄로 통째로 실행 (CRLF 영향 제거)
    entrypoint:
      - /bin/sh
      - -lc
      - >
        rpk cluster info --brokers kafka:9092 >/dev/null
        && rpk topic create --brokers kafka:9092 -p 3 -r 1 --config retention.ms=604800000 location-events notifications
        && rpk topic create --brokers kafka:9092 -p 3 -r 1 --config retention.ms=1209600000 location-events.dlt notifications.dlt
    restart: "no"

  api-gateway:
    build:
      context: ../services/api-gateway
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: "6379"
      # ⬇ 라우트 타깃 환경변수 추가(원하면 생략 가능: 위 YAML의 기본값과 동일)
      LOCATIONS_HOST: location-event-service
      LOCATIONS_PORT: "8301"
      NOTIFICATIONS_HOST: notification-service
      NOTIFICATIONS_PORT: "8501"
    ports: [ "8000:8000" ]
    restart: unless-stopped
    depends_on:
      todo-service:
        condition: service_started
      redis:
        condition: service_healthy
      # ⬇ 게이트웨이가 의존하는 서비스도 명시해두면 편함
      notification-service:
        condition: service_started
      location-event-service:
        condition: service_started

  todo-service:
    build:
      context: ../services/todo-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports: ["8201:8201"]
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy

  location-event-service:
    build:
      context: ../services/location-event-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports: ["8301:8301"]
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy

  trigger-engine-service:
    build:
      context: ../services/trigger-engine-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports: ["8401:8401"]
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy

  notification-service:
    build:
      context: ../services/notification-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
    ports: ["8501:8501"]
    restart: unless-stopped
    depends_on:
      kafka:
        condition: service_healthy

volumes:
  mysql_data:
  redpanda_data: